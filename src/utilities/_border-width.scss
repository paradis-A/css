// Border width
// options to pass to the utility API
//

// Default values
$border-width-values: map-get($config, border-width) !default;
$border-width-state: null !default;
$border-width-responsive: true !default;

// Override default options with the theme's ones
$border-width-defaults: (
    responsive: if(map-has-key($theme, border-width, responsive), map-get($theme, border-width, responsive), $border-width-responsive),
    values: if(map-has-key($theme, border-width, values), map-get($theme, border-width, values), $border-width-values),
    disable: if(map-has-key($theme, border-width, disable), map-get($theme, border-width, disable), false)
) !default;

$border-width-options: (
    property: border-width,
    class: border,
    responsive: map-get($border-width-defaults, responsive),
    values: map-get($border-width-defaults, values),
);

$border-top-width-options: (
    property: border-top-width,
    class: border-top,
    responsive: map-get($border-width-defaults, responsive),
    values: map-get($border-width-defaults, values),
);

$border-right-width-options: (
    property: border-right-width,
    class: border-end,
    responsive: map-get($border-width-defaults, responsive),
    values: map-get($border-width-defaults, values),
);

$border-bottom-width-options: (
    property: border-bottom-width,
    class: border-bottom,
    responsive: map-get($border-width-defaults, responsive),
    values: map-get($border-width-defaults, values),
);

$border-left-width-options: (
    property: border-left-width,
    class: border-start,
    responsive: map-get($border-width-defaults, responsive),
    values: map-get($border-width-defaults, values),
);

// Merge states (variants)
@if(map-has-key($theme, border-width, state)) {
    // Push new values to default list if not null
    $border-width-state: if($border-width-state != null, append($border-width-state, map-get($theme, border-width, state)), map-get($theme, border-width, state));

    // Merge states with the utility options
    $border-width-options: map-merge($border-width-options, (
        state: map-get($theme, border-width, state)
    ));
    $border-top-width-options: map-merge($border-top-width-options, (
        state: map-get($theme, border-width, state)
    ));
    $border-right-width-options: map-merge($border-right-width-options, (
        state: map-get($theme, border-width, state)
    ));
    $border-bottom-width-options: map-merge($border-bottom-width-options, (
        state: map-get($theme, border-width, state)
    ));
    $border-left-width-options: map-merge($border-left-width-options, (
        state: map-get($theme, border-width, state)
    ));
} @else {
    @if($border-width-state != null) {
        $border-width-options: map-merge($border-width-options, (
            state: $border-width-state
        ));
        $border-top-width-options: map-merge($border-top-width-options, (
            state: $border-width-state
        ));
        $border-right-width-options: map-merge($border-right-width-options, (
            state: $border-width-state
        ));
        $border-bottom-width-options: map-merge($border-bottom-width-options, (
            state: $border-width-state
        ));
        $border-left-width-options: map-merge($border-left-width-options, (
            state: $border-width-state
        ));
    }
}
