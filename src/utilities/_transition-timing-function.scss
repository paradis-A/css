// Transition timing function
// options to pass to the utility API
//

// Default values
$transition-timing-function-values: map-get($config, transition-timing-function) !default;
$transition-timing-function-state: null !default;
$transition-timing-function-responsive: true !default;

// Override default options with the theme's ones
$transition-timing-function-defaults: (
    responsive: if(map-has-key($theme, transition-timing-function, responsive), map-get($theme, transition-timing-function, responsive), $transition-timing-function-responsive),
    values: if(map-has-key($theme, transition-timing-function, values), map-get($theme, transition-timing-function, values), $transition-timing-function-values),
    disable: if(map-has-key($theme, transition-timing-function, disable), map-get($theme, transition-timing-function, disable), false)
) !default;

$transition-timing-function-options: (
    property: transition-timing-function,
    class: ease,
    responsive: map-get($transition-timing-function-defaults, responsive),
    values: map-get($transition-timing-function-defaults, values),
);

// Merge states (variants)
@if(map-has-key($theme, transition-timing-function, state)) {
    // Push new values to default list if not null
    $transition-timing-function-state: if($transition-timing-function-state != null, append($transition-timing-function-state, map-get($theme, transition-timing-function, state)), map-get($theme, transition-timing-function, state));

    // Merge states with the utility options
    $transition-timing-function-options: map-merge($transition-timing-function-options, (
        state: map-get($theme, transition-timing-function, state)
    ));
} @else {
    @if($transition-timing-function-state != null) {
        $transition-timing-function-options: map-merge($transition-timing-function-options, (
            state: $transition-timing-function-state
        ));
    }
}
